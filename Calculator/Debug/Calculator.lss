
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e50  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00001e50  00001ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000168c  00000000  00000000  00001ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000df1  00000000  00000000  0000367c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000446d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  0000460d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  000047fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  00006c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  00007f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00009158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  00009318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000960b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009fd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <main>
      7a:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 e6       	ldi	r26, 0x69	; 105
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 e6       	ldi	r24, 0x69	; 105
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	69 e6       	ldi	r22, 0x69	; 105
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	ef 58       	subi	r30, 0x8F	; 143
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <CLCD_voidSendCommand>:
#include "CLCD_interface.h"
#include "CLCD_config.h"
#include "CLCD_private.h"


void CLCD_voidSendCommand(u8 Copy_u8Command){
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	2f 97       	sbiw	r28, 0x0f	; 15
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_u8SetPinValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_u8SetPinValue>

	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	6f 85       	ldd	r22, Y+15	; 0x0f
     e16:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <DIO_u8SetPortValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	62 e0       	ldi	r22, 0x02	; 2
     e1e:	41 e0       	ldi	r20, 0x01	; 1
     e20:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_u8SetPinValue>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	a0 e0       	ldi	r26, 0x00	; 0
     e2a:	b0 e4       	ldi	r27, 0x40	; 64
     e2c:	8b 87       	std	Y+11, r24	; 0x0b
     e2e:	9c 87       	std	Y+12, r25	; 0x0c
     e30:	ad 87       	std	Y+13, r26	; 0x0d
     e32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e34:	6b 85       	ldd	r22, Y+11	; 0x0b
     e36:	7c 85       	ldd	r23, Y+12	; 0x0c
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	4a ef       	ldi	r20, 0xFA	; 250
     e42:	54 e4       	ldi	r21, 0x44	; 68
     e44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	8f 83       	std	Y+7, r24	; 0x07
     e4e:	98 87       	std	Y+8, r25	; 0x08
     e50:	a9 87       	std	Y+9, r26	; 0x09
     e52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e54:	6f 81       	ldd	r22, Y+7	; 0x07
     e56:	78 85       	ldd	r23, Y+8	; 0x08
     e58:	89 85       	ldd	r24, Y+9	; 0x09
     e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e8       	ldi	r20, 0x80	; 128
     e62:	5f e3       	ldi	r21, 0x3F	; 63
     e64:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e68:	88 23       	and	r24, r24
     e6a:	2c f4       	brge	.+10     	; 0xe76 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	9e 83       	std	Y+6, r25	; 0x06
     e72:	8d 83       	std	Y+5, r24	; 0x05
     e74:	3f c0       	rjmp	.+126    	; 0xef4 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     e76:	6f 81       	ldd	r22, Y+7	; 0x07
     e78:	78 85       	ldd	r23, Y+8	; 0x08
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	4f e7       	ldi	r20, 0x7F	; 127
     e84:	57 e4       	ldi	r21, 0x47	; 71
     e86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e8a:	18 16       	cp	r1, r24
     e8c:	4c f5       	brge	.+82     	; 0xee0 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e90:	7c 85       	ldd	r23, Y+12	; 0x0c
     e92:	8d 85       	ldd	r24, Y+13	; 0x0d
     e94:	9e 85       	ldd	r25, Y+14	; 0x0e
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e2       	ldi	r20, 0x20	; 32
     e9c:	51 e4       	ldi	r21, 0x41	; 65
     e9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <CLCD_voidSendCommand+0xee>
     eb8:	88 ec       	ldi	r24, 0xC8	; 200
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9c 83       	std	Y+4, r25	; 0x04
     ebe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <CLCD_voidSendCommand+0xdc>
     ec8:	9c 83       	std	Y+4, r25	; 0x04
     eca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	9e 83       	std	Y+6, r25	; 0x06
     ed4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	69 f7       	brne	.-38     	; 0xeb8 <CLCD_voidSendCommand+0xd0>
     ede:	14 c0       	rjmp	.+40     	; 0xf08 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee0:	6f 81       	ldd	r22, Y+7	; 0x07
     ee2:	78 85       	ldd	r23, Y+8	; 0x08
     ee4:	89 85       	ldd	r24, Y+9	; 0x09
     ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <CLCD_voidSendCommand+0x118>
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	62 e0       	ldi	r22, 0x02	; 2
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_u8SetPinValue>
}
     f12:	2f 96       	adiw	r28, 0x0f	; 15
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	2f 97       	sbiw	r28, 0x0f	; 15
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	8f 87       	std	Y+15, r24	; 0x0f
//	static u8 Local_u8ColCounter=0;
//	if(Local_u8ColCounter>=16){
//		Local_u8ColCounter=0;
//		CLCD_voidGoToXY(1,0);
//	}
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_u8SetPinValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	6f 85       	ldd	r22, Y+15	; 0x0f
     f52:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <DIO_u8SetPortValue>

	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	62 e0       	ldi	r22, 0x02	; 2
     f5a:	41 e0       	ldi	r20, 0x01	; 1
     f5c:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_u8SetPinValue>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e4       	ldi	r27, 0x40	; 64
     f68:	8b 87       	std	Y+11, r24	; 0x0b
     f6a:	9c 87       	std	Y+12, r25	; 0x0c
     f6c:	ad 87       	std	Y+13, r26	; 0x0d
     f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f70:	6b 85       	ldd	r22, Y+11	; 0x0b
     f72:	7c 85       	ldd	r23, Y+12	; 0x0c
     f74:	8d 85       	ldd	r24, Y+13	; 0x0d
     f76:	9e 85       	ldd	r25, Y+14	; 0x0e
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	4a ef       	ldi	r20, 0xFA	; 250
     f7e:	54 e4       	ldi	r21, 0x44	; 68
     f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	8f 83       	std	Y+7, r24	; 0x07
     f8a:	98 87       	std	Y+8, r25	; 0x08
     f8c:	a9 87       	std	Y+9, r26	; 0x09
     f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f90:	6f 81       	ldd	r22, Y+7	; 0x07
     f92:	78 85       	ldd	r23, Y+8	; 0x08
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	2c f4       	brge	.+10     	; 0xfb2 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9e 83       	std	Y+6, r25	; 0x06
     fae:	8d 83       	std	Y+5, r24	; 0x05
     fb0:	3f c0       	rjmp	.+126    	; 0x1030 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     fb2:	6f 81       	ldd	r22, Y+7	; 0x07
     fb4:	78 85       	ldd	r23, Y+8	; 0x08
     fb6:	89 85       	ldd	r24, Y+9	; 0x09
     fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	3f ef       	ldi	r19, 0xFF	; 255
     fbe:	4f e7       	ldi	r20, 0x7F	; 127
     fc0:	57 e4       	ldi	r21, 0x47	; 71
     fc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fc6:	18 16       	cp	r1, r24
     fc8:	4c f5       	brge	.+82     	; 0x101c <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fca:	6b 85       	ldd	r22, Y+11	; 0x0b
     fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fce:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e2       	ldi	r20, 0x20	; 32
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	8d 83       	std	Y+5, r24	; 0x05
     ff2:	0f c0       	rjmp	.+30     	; 0x1012 <CLCD_voidSendData+0xee>
     ff4:	88 ec       	ldi	r24, 0xC8	; 200
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <CLCD_voidSendData+0xdc>
    1004:	9c 83       	std	Y+4, r25	; 0x04
    1006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	69 f7       	brne	.-38     	; 0xff4 <CLCD_voidSendData+0xd0>
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101c:	6f 81       	ldd	r22, Y+7	; 0x07
    101e:	78 85       	ldd	r23, Y+8	; 0x08
    1020:	89 85       	ldd	r24, Y+9	; 0x09
    1022:	9a 85       	ldd	r25, Y+10	; 0x0a
    1024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <CLCD_voidSendData+0x118>
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	62 e0       	ldi	r22, 0x02	; 2
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_u8SetPinValue>
	//Local_u8ColCounter++;
}
    104e:	2f 96       	adiw	r28, 0x0f	; 15
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <CLCD_voidInit>:

void CLCD_voidInit(void){
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	2e 97       	sbiw	r28, 0x0e	; 14
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	a0 e2       	ldi	r26, 0x20	; 32
    107a:	b2 e4       	ldi	r27, 0x42	; 66
    107c:	8b 87       	std	Y+11, r24	; 0x0b
    107e:	9c 87       	std	Y+12, r25	; 0x0c
    1080:	ad 87       	std	Y+13, r26	; 0x0d
    1082:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1084:	6b 85       	ldd	r22, Y+11	; 0x0b
    1086:	7c 85       	ldd	r23, Y+12	; 0x0c
    1088:	8d 85       	ldd	r24, Y+13	; 0x0d
    108a:	9e 85       	ldd	r25, Y+14	; 0x0e
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4a ef       	ldi	r20, 0xFA	; 250
    1092:	54 e4       	ldi	r21, 0x44	; 68
    1094:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	8f 83       	std	Y+7, r24	; 0x07
    109e:	98 87       	std	Y+8, r25	; 0x08
    10a0:	a9 87       	std	Y+9, r26	; 0x09
    10a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10a4:	6f 81       	ldd	r22, Y+7	; 0x07
    10a6:	78 85       	ldd	r23, Y+8	; 0x08
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e8       	ldi	r20, 0x80	; 128
    10b2:	5f e3       	ldi	r21, 0x3F	; 63
    10b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10b8:	88 23       	and	r24, r24
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <CLCD_voidInit+0x66>
		__ticks = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9e 83       	std	Y+6, r25	; 0x06
    10c2:	8d 83       	std	Y+5, r24	; 0x05
    10c4:	3f c0       	rjmp	.+126    	; 0x1144 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    10c6:	6f 81       	ldd	r22, Y+7	; 0x07
    10c8:	78 85       	ldd	r23, Y+8	; 0x08
    10ca:	89 85       	ldd	r24, Y+9	; 0x09
    10cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10da:	18 16       	cp	r1, r24
    10dc:	4c f5       	brge	.+82     	; 0x1130 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10de:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e2       	ldi	r20, 0x20	; 32
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	8d 83       	std	Y+5, r24	; 0x05
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <CLCD_voidInit+0xc6>
    1108:	88 ec       	ldi	r24, 0xC8	; 200
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <CLCD_voidInit+0xb4>
    1118:	9c 83       	std	Y+4, r25	; 0x04
    111a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f7       	brne	.-38     	; 0x1108 <CLCD_voidInit+0xa8>
    112e:	14 c0       	rjmp	.+40     	; 0x1158 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	9e 83       	std	Y+6, r25	; 0x06
    1142:	8d 83       	std	Y+5, r24	; 0x05
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <CLCD_voidInit+0xf0>
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	CLCD_voidSendCommand(0b00111000);
    1158:	88 e3       	ldi	r24, 0x38	; 56
    115a:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00001100);
    115e:	8c e0       	ldi	r24, 0x0C	; 12
    1160:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(1);
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_voidSendCommand>
}
    116a:	2e 96       	adiw	r28, 0x0e	; 14
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <CLCD_voidSendString>:

void CLCD_voidSendString(const char *Copy_pcString){
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <CLCD_voidSendString+0x6>
    1182:	0f 92       	push	r0
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	9b 83       	std	Y+3, r25	; 0x03
    118a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    118c:	19 82       	std	Y+1, r1	; 0x01
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter]!='\0'){
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	9b 81       	ldd	r25, Y+3	; 0x03
    119a:	fc 01       	movw	r30, r24
    119c:	e2 0f       	add	r30, r18
    119e:	f3 1f       	adc	r31, r19
    11a0:	80 81       	ld	r24, Z
    11a2:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>
		Local_u8Counter++;
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(1);
}

void CLCD_voidSendString(const char *Copy_pcString){
	u8 Local_u8Counter=0;
	while (Copy_pcString[Local_u8Counter]!='\0'){
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	9b 81       	ldd	r25, Y+3	; 0x03
    11b6:	fc 01       	movw	r30, r24
    11b8:	e2 0f       	add	r30, r18
    11ba:	f3 1f       	adc	r31, r19
    11bc:	80 81       	ld	r24, Z
    11be:	88 23       	and	r24, r24
    11c0:	39 f7       	brne	.-50     	; 0x1190 <CLCD_voidSendString+0x14>
//	u8 *ptr=Copy_pcString;
//	while(*ptr!='\0'){
//		CLCD_voidSendData(*ptr);
//		ptr++;
//	}
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos){
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <CLCD_voidGoToXY+0x6>
    11d4:	0f 92       	push	r0
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	8a 83       	std	Y+2, r24	; 0x02
    11dc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address=0;
    11de:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8XPos==0){
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	88 23       	and	r24, r24
    11e4:	19 f4       	brne	.+6      	; 0x11ec <CLCD_voidGoToXY+0x1e>
		Local_u8Address=Copy_u8YPos;
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	06 c0       	rjmp	.+12     	; 0x11f8 <CLCD_voidGoToXY+0x2a>
	}
	else if(Copy_u8XPos==1){
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	19 f4       	brne	.+6      	; 0x11f8 <CLCD_voidGoToXY+0x2a>
		Local_u8Address=Copy_u8YPos+0x40;
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	80 5c       	subi	r24, 0xC0	; 192
    11f6:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8Address+128);
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	80 58       	subi	r24, 0x80	; 128
    11fc:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_voidSendCommand>
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8 * Copy_pu8Pattern, u8 Copy_u8PatternNum,u8 Copy_u8XPos,u8 Copy_u8YPos){
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	27 97       	sbiw	r28, 0x07	; 7
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
    1224:	6d 83       	std	Y+5, r22	; 0x05
    1226:	4e 83       	std	Y+6, r20	; 0x06
    1228:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=Copy_u8PatternNum*8;
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	80 5c       	subi	r24, 0xC0	; 192
    1242:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_voidSendCommand>
	u8 Local_u8Iterator=0;
    1246:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
    1248:	19 82       	std	Y+1, r1	; 0x01
    124a:	0e c0       	rjmp	.+28     	; 0x1268 <CLCD_voidWriteSpecialCharacter+0x5c>
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	fc 01       	movw	r30, r24
    1258:	e2 0f       	add	r30, r18
    125a:	f3 1f       	adc	r31, r19
    125c:	80 81       	ld	r24, Z
    125e:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>

void CLCD_voidWriteSpecialCharacter(u8 * Copy_pu8Pattern, u8 Copy_u8PatternNum,u8 Copy_u8XPos,u8 Copy_u8YPos){
	u8 Local_u8CGRAMAddress=Copy_u8PatternNum*8;
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
	u8 Local_u8Iterator=0;
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++){
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	78 f3       	brcs	.-34     	; 0x124c <CLCD_voidWriteSpecialCharacter+0x40>
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    126e:	8e 81       	ldd	r24, Y+6	; 0x06
    1270:	6f 81       	ldd	r22, Y+7	; 0x07
    1272:	0e 94 e7 08 	call	0x11ce	; 0x11ce <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNum);
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>
}
    127c:	27 96       	adiw	r28, 0x07	; 7
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number){
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	2b 97       	sbiw	r28, 0x0b	; 11
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	68 87       	std	Y+8, r22	; 0x08
    12a4:	79 87       	std	Y+9, r23	; 0x09
    12a6:	8a 87       	std	Y+10, r24	; 0x0a
    12a8:	9b 87       	std	Y+11, r25	; 0x0b
	if(Copy_u32Number==0){
    12aa:	88 85       	ldd	r24, Y+8	; 0x08
    12ac:	99 85       	ldd	r25, Y+9	; 0x09
    12ae:	aa 85       	ldd	r26, Y+10	; 0x0a
    12b0:	bb 85       	ldd	r27, Y+11	; 0x0b
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	a1 05       	cpc	r26, r1
    12b6:	b1 05       	cpc	r27, r1
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <CLCD_voidWriteNumber+0x34>
		CLCD_voidSendData('0');
    12ba:	80 e3       	ldi	r24, 0x30	; 48
    12bc:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>
    12c0:	7c c0       	rjmp	.+248    	; 0x13ba <CLCD_voidWriteNumber+0x12c>
		return;
	}
	u32 Local_u8Reverse=0;
    12c2:	1c 82       	std	Y+4, r1	; 0x04
    12c4:	1d 82       	std	Y+5, r1	; 0x05
    12c6:	1e 82       	std	Y+6, r1	; 0x06
    12c8:	1f 82       	std	Y+7, r1	; 0x07
	u8 Local_u8NumOfDigits=0;
    12ca:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Remainder=0,Local_u8Send=0;
    12cc:	1a 82       	std	Y+2, r1	; 0x02
    12ce:	19 82       	std	Y+1, r1	; 0x01
    12d0:	3f c0       	rjmp	.+126    	; 0x1350 <CLCD_voidWriteNumber+0xc2>
	while (Copy_u32Number != 0) {
		Local_u8Remainder = Copy_u32Number % 10;
    12d2:	88 85       	ldd	r24, Y+8	; 0x08
    12d4:	99 85       	ldd	r25, Y+9	; 0x09
    12d6:	aa 85       	ldd	r26, Y+10	; 0x0a
    12d8:	bb 85       	ldd	r27, Y+11	; 0x0b
    12da:	2a e0       	ldi	r18, 0x0A	; 10
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__udivmodsi4>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Reverse = Local_u8Reverse * 10 + Local_u8Remainder;
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	ae 81       	ldd	r26, Y+6	; 0x06
    12f6:	bf 81       	ldd	r27, Y+7	; 0x07
    12f8:	2a e0       	ldi	r18, 0x0A	; 10
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__mulsi3>
    1308:	9b 01       	movw	r18, r22
    130a:	ac 01       	movw	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a0 e0       	ldi	r26, 0x00	; 0
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	82 0f       	add	r24, r18
    1318:	93 1f       	adc	r25, r19
    131a:	a4 1f       	adc	r26, r20
    131c:	b5 1f       	adc	r27, r21
    131e:	8c 83       	std	Y+4, r24	; 0x04
    1320:	9d 83       	std	Y+5, r25	; 0x05
    1322:	ae 83       	std	Y+6, r26	; 0x06
    1324:	bf 83       	std	Y+7, r27	; 0x07
		Copy_u32Number /= 10;
    1326:	88 85       	ldd	r24, Y+8	; 0x08
    1328:	99 85       	ldd	r25, Y+9	; 0x09
    132a:	aa 85       	ldd	r26, Y+10	; 0x0a
    132c:	bb 85       	ldd	r27, Y+11	; 0x0b
    132e:	2a e0       	ldi	r18, 0x0A	; 10
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__udivmodsi4>
    133e:	da 01       	movw	r26, r20
    1340:	c9 01       	movw	r24, r18
    1342:	88 87       	std	Y+8, r24	; 0x08
    1344:	99 87       	std	Y+9, r25	; 0x09
    1346:	aa 87       	std	Y+10, r26	; 0x0a
    1348:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumOfDigits++;
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	8b 83       	std	Y+3, r24	; 0x03
		return;
	}
	u32 Local_u8Reverse=0;
	u8 Local_u8NumOfDigits=0;
	u8 Local_u8Remainder=0,Local_u8Send=0;
	while (Copy_u32Number != 0) {
    1350:	88 85       	ldd	r24, Y+8	; 0x08
    1352:	99 85       	ldd	r25, Y+9	; 0x09
    1354:	aa 85       	ldd	r26, Y+10	; 0x0a
    1356:	bb 85       	ldd	r27, Y+11	; 0x0b
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	a1 05       	cpc	r26, r1
    135c:	b1 05       	cpc	r27, r1
    135e:	09 f0       	breq	.+2      	; 0x1362 <CLCD_voidWriteNumber+0xd4>
    1360:	b8 cf       	rjmp	.-144    	; 0x12d2 <CLCD_voidWriteNumber+0x44>
    1362:	28 c0       	rjmp	.+80     	; 0x13b4 <CLCD_voidWriteNumber+0x126>
		Local_u8Reverse = Local_u8Reverse * 10 + Local_u8Remainder;
		Copy_u32Number /= 10;
		Local_u8NumOfDigits++;
	  }
	while(Local_u8NumOfDigits!=0){
		Local_u8Send=(Local_u8Reverse%10)+48;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	ae 81       	ldd	r26, Y+6	; 0x06
    136a:	bf 81       	ldd	r27, Y+7	; 0x07
    136c:	2a e0       	ldi	r18, 0x0A	; 10
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__udivmodsi4>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	80 5d       	subi	r24, 0xD0	; 208
    1382:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendData(Local_u8Send);
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>
		Local_u8Reverse/=10;
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	ae 81       	ldd	r26, Y+6	; 0x06
    1390:	bf 81       	ldd	r27, Y+7	; 0x07
    1392:	2a e0       	ldi	r18, 0x0A	; 10
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__udivmodsi4>
    13a2:	da 01       	movw	r26, r20
    13a4:	c9 01       	movw	r24, r18
    13a6:	8c 83       	std	Y+4, r24	; 0x04
    13a8:	9d 83       	std	Y+5, r25	; 0x05
    13aa:	ae 83       	std	Y+6, r26	; 0x06
    13ac:	bf 83       	std	Y+7, r27	; 0x07
		Local_u8NumOfDigits--;
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	81 50       	subi	r24, 0x01	; 1
    13b2:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8Remainder = Copy_u32Number % 10;
		Local_u8Reverse = Local_u8Reverse * 10 + Local_u8Remainder;
		Copy_u32Number /= 10;
		Local_u8NumOfDigits++;
	  }
	while(Local_u8NumOfDigits!=0){
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 23       	and	r24, r24
    13b8:	a9 f6       	brne	.-86     	; 0x1364 <CLCD_voidWriteNumber+0xd6>
		Local_u8Send=(Local_u8Reverse%10)+48;
		CLCD_voidSendData(Local_u8Send);
		Local_u8Reverse/=10;
		Local_u8NumOfDigits--;
	}
}
    13ba:	2b 96       	adiw	r28, 0x0b	; 11
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <CLCD_voidWriteFloatNum>:
void CLCD_voidWriteFloatNum(f32 Copy_f32Num){
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	29 97       	sbiw	r28, 0x09	; 9
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	6e 83       	std	Y+6, r22	; 0x06
    13e2:	7f 83       	std	Y+7, r23	; 0x07
    13e4:	88 87       	std	Y+8, r24	; 0x08
    13e6:	99 87       	std	Y+9, r25	; 0x09
	u8 Local_u8NumInt=(int)Copy_f32Num;
    13e8:	6e 81       	ldd	r22, Y+6	; 0x06
    13ea:	7f 81       	ldd	r23, Y+7	; 0x07
    13ec:	88 85       	ldd	r24, Y+8	; 0x08
    13ee:	99 85       	ldd	r25, Y+9	; 0x09
    13f0:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	8d 83       	std	Y+5, r24	; 0x05
	CLCD_voidWriteNumber(Local_u8NumInt);
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a0 e0       	ldi	r26, 0x00	; 0
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	bc 01       	movw	r22, r24
    1406:	cd 01       	movw	r24, r26
    1408:	0e 94 47 09 	call	0x128e	; 0x128e <CLCD_voidWriteNumber>
	CLCD_voidSendData('.');
    140c:	8e e2       	ldi	r24, 0x2E	; 46
    140e:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>
	f32 Local_f32FloatNum=Copy_f32Num-Local_u8NumInt;
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	aa 27       	eor	r26, r26
    141a:	97 fd       	sbrc	r25, 7
    141c:	a0 95       	com	r26
    141e:	ba 2f       	mov	r27, r26
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    1428:	9b 01       	movw	r18, r22
    142a:	ac 01       	movw	r20, r24
    142c:	6e 81       	ldd	r22, Y+6	; 0x06
    142e:	7f 81       	ldd	r23, Y+7	; 0x07
    1430:	88 85       	ldd	r24, Y+8	; 0x08
    1432:	99 85       	ldd	r25, Y+9	; 0x09
    1434:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	ab 83       	std	Y+3, r26	; 0x03
    1442:	bc 83       	std	Y+4, r27	; 0x04
	Local_f32FloatNum*=100000;
    1444:	69 81       	ldd	r22, Y+1	; 0x01
    1446:	7a 81       	ldd	r23, Y+2	; 0x02
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e5       	ldi	r19, 0x50	; 80
    1450:	43 ec       	ldi	r20, 0xC3	; 195
    1452:	57 e4       	ldi	r21, 0x47	; 71
    1454:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	ab 83       	std	Y+3, r26	; 0x03
    1462:	bc 83       	std	Y+4, r27	; 0x04
	CLCD_voidWriteNumber(Local_f32FloatNum);
    1464:	69 81       	ldd	r22, Y+1	; 0x01
    1466:	7a 81       	ldd	r23, Y+2	; 0x02
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	bc 01       	movw	r22, r24
    1476:	cd 01       	movw	r24, r26
    1478:	0e 94 47 09 	call	0x128e	; 0x128e <CLCD_voidWriteNumber>
}
    147c:	29 96       	adiw	r28, 0x09	; 9
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <DIO_u8SetPinValue>:
#include "DIO_interface.h"
#include "DIO_register.h"
#include "DIO_config.h"
#include "DIO_private.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin,u8 Copy_u8Value){
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	28 97       	sbiw	r28, 0x08	; 8
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	8a 83       	std	Y+2, r24	; 0x02
    14a4:	6b 83       	std	Y+3, r22	; 0x03
    14a6:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
    14a8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7){
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	88 30       	cpi	r24, 0x08	; 8
    14ae:	08 f0       	brcs	.+2      	; 0x14b2 <DIO_u8SetPinValue+0x24>
    14b0:	f4 c0       	rjmp	.+488    	; 0x169a <DIO_u8SetPinValue+0x20c>
		if(Copy_u8Value==DIO_u8PIN_LOW){
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	88 23       	and	r24, r24
    14b6:	09 f0       	breq	.+2      	; 0x14ba <DIO_u8SetPinValue+0x2c>
    14b8:	77 c0       	rjmp	.+238    	; 0x15a8 <DIO_u8SetPinValue+0x11a>
			switch(Copy_u8Port){
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	38 87       	std	Y+8, r19	; 0x08
    14c2:	2f 83       	std	Y+7, r18	; 0x07
    14c4:	8f 81       	ldd	r24, Y+7	; 0x07
    14c6:	98 85       	ldd	r25, Y+8	; 0x08
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	59 f1       	breq	.+86     	; 0x1524 <DIO_u8SetPinValue+0x96>
    14ce:	2f 81       	ldd	r18, Y+7	; 0x07
    14d0:	38 85       	ldd	r19, Y+8	; 0x08
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <DIO_u8SetPinValue+0x54>
    14d8:	8f 81       	ldd	r24, Y+7	; 0x07
    14da:	98 85       	ldd	r25, Y+8	; 0x08
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	69 f0       	breq	.+26     	; 0x14fa <DIO_u8SetPinValue+0x6c>
    14e0:	60 c0       	rjmp	.+192    	; 0x15a2 <DIO_u8SetPinValue+0x114>
    14e2:	2f 81       	ldd	r18, Y+7	; 0x07
    14e4:	38 85       	ldd	r19, Y+8	; 0x08
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	89 f1       	breq	.+98     	; 0x154e <DIO_u8SetPinValue+0xc0>
    14ec:	8f 81       	ldd	r24, Y+7	; 0x07
    14ee:	98 85       	ldd	r25, Y+8	; 0x08
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	91 05       	cpc	r25, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <DIO_u8SetPinValue+0x6a>
    14f6:	40 c0       	rjmp	.+128    	; 0x1578 <DIO_u8SetPinValue+0xea>
    14f8:	54 c0       	rjmp	.+168    	; 0x15a2 <DIO_u8SetPinValue+0x114>
			case DIO_u8PORTA:
				CLR_BIT(PORTA,Copy_u8Pin);
    14fa:	ab e3       	ldi	r26, 0x3B	; 59
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	eb e3       	ldi	r30, 0x3B	; 59
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_u8SetPinValue+0x8a>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <DIO_u8SetPinValue+0x86>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	bd c0       	rjmp	.+378    	; 0x169e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTB:
				CLR_BIT(PORTB,Copy_u8Pin);
    1524:	a8 e3       	ldi	r26, 0x38	; 56
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e8 e3       	ldi	r30, 0x38	; 56
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_u8SetPinValue+0xb4>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_u8SetPinValue+0xb0>
    1546:	80 95       	com	r24
    1548:	84 23       	and	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	a8 c0       	rjmp	.+336    	; 0x169e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTC:
				CLR_BIT(PORTC,Copy_u8Pin);
    154e:	a5 e3       	ldi	r26, 0x35	; 53
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e5 e3       	ldi	r30, 0x35	; 53
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_u8SetPinValue+0xde>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_u8SetPinValue+0xda>
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	93 c0       	rjmp	.+294    	; 0x169e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTD:
				CLR_BIT(PORTD,Copy_u8Pin);
    1578:	a2 e3       	ldi	r26, 0x32	; 50
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 e3       	ldi	r30, 0x32	; 50
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_u8SetPinValue+0x108>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_u8SetPinValue+0x104>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	7e c0       	rjmp	.+252    	; 0x169e <DIO_u8SetPinValue+0x210>
				break;

			default:
				Local_u8ErrorState=1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	7b c0       	rjmp	.+246    	; 0x169e <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH){
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <DIO_u8SetPinValue+0x122>
    15ae:	72 c0       	rjmp	.+228    	; 0x1694 <DIO_u8SetPinValue+0x206>
			switch(Copy_u8Port){
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3e 83       	std	Y+6, r19	; 0x06
    15b8:	2d 83       	std	Y+5, r18	; 0x05
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	49 f1       	breq	.+82     	; 0x1616 <DIO_u8SetPinValue+0x188>
    15c4:	2d 81       	ldd	r18, Y+5	; 0x05
    15c6:	3e 81       	ldd	r19, Y+6	; 0x06
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <DIO_u8SetPinValue+0x14a>
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	61 f0       	breq	.+24     	; 0x15ee <DIO_u8SetPinValue+0x160>
    15d6:	5b c0       	rjmp	.+182    	; 0x168e <DIO_u8SetPinValue+0x200>
    15d8:	2d 81       	ldd	r18, Y+5	; 0x05
    15da:	3e 81       	ldd	r19, Y+6	; 0x06
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	71 f1       	breq	.+92     	; 0x163e <DIO_u8SetPinValue+0x1b0>
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	91 05       	cpc	r25, r1
    15ea:	e9 f1       	breq	.+122    	; 0x1666 <DIO_u8SetPinValue+0x1d8>
    15ec:	50 c0       	rjmp	.+160    	; 0x168e <DIO_u8SetPinValue+0x200>
			case DIO_u8PORTA:
				SET_BIT(PORTA,Copy_u8Pin);
    15ee:	ab e3       	ldi	r26, 0x3B	; 59
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	eb e3       	ldi	r30, 0x3B	; 59
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_u8SetPinValue+0x17e>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_u8SetPinValue+0x17a>
    1610:	84 2b       	or	r24, r20
    1612:	8c 93       	st	X, r24
    1614:	44 c0       	rjmp	.+136    	; 0x169e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTB:
				SET_BIT(PORTB,Copy_u8Pin);
    1616:	a8 e3       	ldi	r26, 0x38	; 56
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e8 e3       	ldi	r30, 0x38	; 56
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_u8SetPinValue+0x1a6>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_u8SetPinValue+0x1a2>
    1638:	84 2b       	or	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	30 c0       	rjmp	.+96     	; 0x169e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTC:
				SET_BIT(PORTC,Copy_u8Pin);
    163e:	a5 e3       	ldi	r26, 0x35	; 53
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e5 e3       	ldi	r30, 0x35	; 53
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <DIO_u8SetPinValue+0x1ce>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <DIO_u8SetPinValue+0x1ca>
    1660:	84 2b       	or	r24, r20
    1662:	8c 93       	st	X, r24
    1664:	1c c0       	rjmp	.+56     	; 0x169e <DIO_u8SetPinValue+0x210>
				break;

			case DIO_u8PORTD:
				SET_BIT(PORTD,Copy_u8Pin);
    1666:	a2 e3       	ldi	r26, 0x32	; 50
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e2 e3       	ldi	r30, 0x32	; 50
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <DIO_u8SetPinValue+0x1f6>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <DIO_u8SetPinValue+0x1f2>
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	08 c0       	rjmp	.+16     	; 0x169e <DIO_u8SetPinValue+0x210>
				break;

			default:
				Local_u8ErrorState=1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	05 c0       	rjmp	.+10     	; 0x169e <DIO_u8SetPinValue+0x210>
				break;
			}
		}
		else{
			Local_u8ErrorState=1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_u8SetPinValue+0x210>
		}
	}
	else {
		Local_u8ErrorState=1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    169e:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a0:	28 96       	adiw	r28, 0x08	; 8
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <DIO_u8SetPortValue+0x6>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <DIO_u8SetPortValue+0x8>
    16ba:	0f 92       	push	r0
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	8a 83       	std	Y+2, r24	; 0x02
    16c2:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ErrorState=0;
    16c4:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	3d 83       	std	Y+5, r19	; 0x05
    16ce:	2c 83       	std	Y+4, r18	; 0x04
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	91 05       	cpc	r25, r1
    16d8:	d1 f0       	breq	.+52     	; 0x170e <DIO_u8SetPortValue+0x5c>
    16da:	2c 81       	ldd	r18, Y+4	; 0x04
    16dc:	3d 81       	ldd	r19, Y+5	; 0x05
    16de:	22 30       	cpi	r18, 0x02	; 2
    16e0:	31 05       	cpc	r19, r1
    16e2:	2c f4       	brge	.+10     	; 0x16ee <DIO_u8SetPortValue+0x3c>
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	9d 81       	ldd	r25, Y+5	; 0x05
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	61 f0       	breq	.+24     	; 0x1704 <DIO_u8SetPortValue+0x52>
    16ec:	1f c0       	rjmp	.+62     	; 0x172c <DIO_u8SetPortValue+0x7a>
    16ee:	2c 81       	ldd	r18, Y+4	; 0x04
    16f0:	3d 81       	ldd	r19, Y+5	; 0x05
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	31 05       	cpc	r19, r1
    16f6:	81 f0       	breq	.+32     	; 0x1718 <DIO_u8SetPortValue+0x66>
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	83 30       	cpi	r24, 0x03	; 3
    16fe:	91 05       	cpc	r25, r1
    1700:	81 f0       	breq	.+32     	; 0x1722 <DIO_u8SetPortValue+0x70>
    1702:	14 c0       	rjmp	.+40     	; 0x172c <DIO_u8SetPortValue+0x7a>
	case DIO_u8PORTA:
		PORTA=Copy_u8Value;
    1704:	eb e3       	ldi	r30, 0x3B	; 59
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	80 83       	st	Z, r24
    170c:	11 c0       	rjmp	.+34     	; 0x1730 <DIO_u8SetPortValue+0x7e>
		break;

	case DIO_u8PORTB:
		PORTB=Copy_u8Value;
    170e:	e8 e3       	ldi	r30, 0x38	; 56
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	80 83       	st	Z, r24
    1716:	0c c0       	rjmp	.+24     	; 0x1730 <DIO_u8SetPortValue+0x7e>
		break;

	case DIO_u8PORTC:
		PORTC=Copy_u8Value;
    1718:	e5 e3       	ldi	r30, 0x35	; 53
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	80 83       	st	Z, r24
    1720:	07 c0       	rjmp	.+14     	; 0x1730 <DIO_u8SetPortValue+0x7e>
		break;

	case DIO_u8PORTD:
		PORTD=Copy_u8Value;
    1722:	e2 e3       	ldi	r30, 0x32	; 50
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	80 83       	st	Z, r24
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_u8SetPortValue+0x7e>
		break;

	default:
		Local_u8ErrorState=1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return Local_u8ErrorState;
    1730:	89 81       	ldd	r24, Y+1	; 0x01
}
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin,u8* Copy_pu8Value){
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	27 97       	sbiw	r28, 0x07	; 7
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	8a 83       	std	Y+2, r24	; 0x02
    1758:	6b 83       	std	Y+3, r22	; 0x03
    175a:	5d 83       	std	Y+5, r21	; 0x05
    175c:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
    175e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value!=NULL){
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	9d 81       	ldd	r25, Y+5	; 0x05
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	09 f4       	brne	.+2      	; 0x176a <DIO_u8GetPinValue+0x28>
    1768:	7b c0       	rjmp	.+246    	; 0x1860 <DIO_u8GetPinValue+0x11e>
		if(Copy_u8Pin<=DIO_u8PIN7){
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	88 30       	cpi	r24, 0x08	; 8
    176e:	08 f0       	brcs	.+2      	; 0x1772 <DIO_u8GetPinValue+0x30>
    1770:	74 c0       	rjmp	.+232    	; 0x185a <DIO_u8GetPinValue+0x118>
			switch(Copy_u8Port){
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3f 83       	std	Y+7, r19	; 0x07
    177a:	2e 83       	std	Y+6, r18	; 0x06
    177c:	4e 81       	ldd	r20, Y+6	; 0x06
    177e:	5f 81       	ldd	r21, Y+7	; 0x07
    1780:	41 30       	cpi	r20, 0x01	; 1
    1782:	51 05       	cpc	r21, r1
    1784:	59 f1       	breq	.+86     	; 0x17dc <DIO_u8GetPinValue+0x9a>
    1786:	8e 81       	ldd	r24, Y+6	; 0x06
    1788:	9f 81       	ldd	r25, Y+7	; 0x07
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	91 05       	cpc	r25, r1
    178e:	34 f4       	brge	.+12     	; 0x179c <DIO_u8GetPinValue+0x5a>
    1790:	2e 81       	ldd	r18, Y+6	; 0x06
    1792:	3f 81       	ldd	r19, Y+7	; 0x07
    1794:	21 15       	cp	r18, r1
    1796:	31 05       	cpc	r19, r1
    1798:	69 f0       	breq	.+26     	; 0x17b4 <DIO_u8GetPinValue+0x72>
    179a:	5c c0       	rjmp	.+184    	; 0x1854 <DIO_u8GetPinValue+0x112>
    179c:	4e 81       	ldd	r20, Y+6	; 0x06
    179e:	5f 81       	ldd	r21, Y+7	; 0x07
    17a0:	42 30       	cpi	r20, 0x02	; 2
    17a2:	51 05       	cpc	r21, r1
    17a4:	79 f1       	breq	.+94     	; 0x1804 <DIO_u8GetPinValue+0xc2>
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	91 05       	cpc	r25, r1
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <DIO_u8GetPinValue+0x70>
    17b0:	3d c0       	rjmp	.+122    	; 0x182c <DIO_u8GetPinValue+0xea>
    17b2:	50 c0       	rjmp	.+160    	; 0x1854 <DIO_u8GetPinValue+0x112>
			case DIO_u8PORTA:
				*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);
    17b4:	e9 e3       	ldi	r30, 0x39	; 57
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a9 01       	movw	r20, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <DIO_u8GetPinValue+0x8a>
    17c8:	55 95       	asr	r21
    17ca:	47 95       	ror	r20
    17cc:	8a 95       	dec	r24
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <DIO_u8GetPinValue+0x86>
    17d0:	ca 01       	movw	r24, r20
    17d2:	81 70       	andi	r24, 0x01	; 1
    17d4:	ec 81       	ldd	r30, Y+4	; 0x04
    17d6:	fd 81       	ldd	r31, Y+5	; 0x05
    17d8:	80 83       	st	Z, r24
    17da:	44 c0       	rjmp	.+136    	; 0x1864 <DIO_u8GetPinValue+0x122>
				break;

			case DIO_u8PORTB:
				*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);
    17dc:	e6 e3       	ldi	r30, 0x36	; 54
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	88 2f       	mov	r24, r24
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	a9 01       	movw	r20, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <DIO_u8GetPinValue+0xb2>
    17f0:	55 95       	asr	r21
    17f2:	47 95       	ror	r20
    17f4:	8a 95       	dec	r24
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <DIO_u8GetPinValue+0xae>
    17f8:	ca 01       	movw	r24, r20
    17fa:	81 70       	andi	r24, 0x01	; 1
    17fc:	ec 81       	ldd	r30, Y+4	; 0x04
    17fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1800:	80 83       	st	Z, r24
    1802:	30 c0       	rjmp	.+96     	; 0x1864 <DIO_u8GetPinValue+0x122>
				break;

			case DIO_u8PORTC:
				*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);
    1804:	e3 e3       	ldi	r30, 0x33	; 51
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a9 01       	movw	r20, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_u8GetPinValue+0xda>
    1818:	55 95       	asr	r21
    181a:	47 95       	ror	r20
    181c:	8a 95       	dec	r24
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_u8GetPinValue+0xd6>
    1820:	ca 01       	movw	r24, r20
    1822:	81 70       	andi	r24, 0x01	; 1
    1824:	ec 81       	ldd	r30, Y+4	; 0x04
    1826:	fd 81       	ldd	r31, Y+5	; 0x05
    1828:	80 83       	st	Z, r24
    182a:	1c c0       	rjmp	.+56     	; 0x1864 <DIO_u8GetPinValue+0x122>
				break;

			case DIO_u8PORTD:
				*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);
    182c:	e0 e3       	ldi	r30, 0x30	; 48
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a9 01       	movw	r20, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_u8GetPinValue+0x102>
    1840:	55 95       	asr	r21
    1842:	47 95       	ror	r20
    1844:	8a 95       	dec	r24
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_u8GetPinValue+0xfe>
    1848:	ca 01       	movw	r24, r20
    184a:	81 70       	andi	r24, 0x01	; 1
    184c:	ec 81       	ldd	r30, Y+4	; 0x04
    184e:	fd 81       	ldd	r31, Y+5	; 0x05
    1850:	80 83       	st	Z, r24
    1852:	08 c0       	rjmp	.+16     	; 0x1864 <DIO_u8GetPinValue+0x122>
				break;

			default:
				Local_u8ErrorState=1;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	05 c0       	rjmp	.+10     	; 0x1864 <DIO_u8GetPinValue+0x122>
				break;
			}
		}
		else{
			Local_u8ErrorState=1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_u8GetPinValue+0x122>
		}
	}
	else{
		Local_u8ErrorState=1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1864:	89 81       	ldd	r24, Y+1	; 0x01
}
    1866:	27 96       	adiw	r28, 0x07	; 7
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8Port,u8* Copy_pu8Value){
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <DIO_u8GetPortValue+0x6>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <DIO_u8GetPortValue+0x8>
    1880:	00 d0       	rcall	.+0      	; 0x1882 <DIO_u8GetPortValue+0xa>
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	7c 83       	std	Y+4, r23	; 0x04
    188a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    188c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8Value!=NULL){
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	09 f4       	brne	.+2      	; 0x1898 <DIO_u8GetPortValue+0x20>
    1896:	3e c0       	rjmp	.+124    	; 0x1914 <DIO_u8GetPortValue+0x9c>

			switch(Copy_u8Port){
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	3e 83       	std	Y+6, r19	; 0x06
    18a0:	2d 83       	std	Y+5, r18	; 0x05
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	9e 81       	ldd	r25, Y+6	; 0x06
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	91 05       	cpc	r25, r1
    18aa:	e1 f0       	breq	.+56     	; 0x18e4 <DIO_u8GetPortValue+0x6c>
    18ac:	2d 81       	ldd	r18, Y+5	; 0x05
    18ae:	3e 81       	ldd	r19, Y+6	; 0x06
    18b0:	22 30       	cpi	r18, 0x02	; 2
    18b2:	31 05       	cpc	r19, r1
    18b4:	2c f4       	brge	.+10     	; 0x18c0 <DIO_u8GetPortValue+0x48>
    18b6:	8d 81       	ldd	r24, Y+5	; 0x05
    18b8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	61 f0       	breq	.+24     	; 0x18d6 <DIO_u8GetPortValue+0x5e>
    18be:	27 c0       	rjmp	.+78     	; 0x190e <DIO_u8GetPortValue+0x96>
    18c0:	2d 81       	ldd	r18, Y+5	; 0x05
    18c2:	3e 81       	ldd	r19, Y+6	; 0x06
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	a1 f0       	breq	.+40     	; 0x18f2 <DIO_u8GetPortValue+0x7a>
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	83 30       	cpi	r24, 0x03	; 3
    18d0:	91 05       	cpc	r25, r1
    18d2:	b1 f0       	breq	.+44     	; 0x1900 <DIO_u8GetPortValue+0x88>
    18d4:	1c c0       	rjmp	.+56     	; 0x190e <DIO_u8GetPortValue+0x96>
			case DIO_u8PORTA:
				*Copy_pu8Value=PINA;
    18d6:	e9 e3       	ldi	r30, 0x39	; 57
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	eb 81       	ldd	r30, Y+3	; 0x03
    18de:	fc 81       	ldd	r31, Y+4	; 0x04
    18e0:	80 83       	st	Z, r24
    18e2:	1a c0       	rjmp	.+52     	; 0x1918 <DIO_u8GetPortValue+0xa0>
				break;

			case DIO_u8PORTB:
				*Copy_pu8Value=PINB;
    18e4:	e6 e3       	ldi	r30, 0x36	; 54
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	eb 81       	ldd	r30, Y+3	; 0x03
    18ec:	fc 81       	ldd	r31, Y+4	; 0x04
    18ee:	80 83       	st	Z, r24
    18f0:	13 c0       	rjmp	.+38     	; 0x1918 <DIO_u8GetPortValue+0xa0>
				break;

			case DIO_u8PORTC:
				*Copy_pu8Value=PINC;
    18f2:	e3 e3       	ldi	r30, 0x33	; 51
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	eb 81       	ldd	r30, Y+3	; 0x03
    18fa:	fc 81       	ldd	r31, Y+4	; 0x04
    18fc:	80 83       	st	Z, r24
    18fe:	0c c0       	rjmp	.+24     	; 0x1918 <DIO_u8GetPortValue+0xa0>
				break;

			case DIO_u8PORTD:
				*Copy_pu8Value=PIND;
    1900:	e0 e3       	ldi	r30, 0x30	; 48
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	eb 81       	ldd	r30, Y+3	; 0x03
    1908:	fc 81       	ldd	r31, Y+4	; 0x04
    190a:	80 83       	st	Z, r24
    190c:	05 c0       	rjmp	.+10     	; 0x1918 <DIO_u8GetPortValue+0xa0>
				break;

			default:
				Local_u8ErrorState=1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_u8GetPortValue+0xa0>
				break;
			}
		}
		else{
			Local_u8ErrorState=1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8ErrorState;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
}
    191a:	26 96       	adiw	r28, 0x06	; 6
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <KPD_u8GetPressedKey>:
#include "KEYPAD_config.h"
#include "KEYPAD_private.h"
#include "KEYPAD_interface.h"


u8 KPD_u8GetPressedKey(void){
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <KPD_u8GetPressedKey+0x6>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <KPD_u8GetPressedKey+0x8>
    1934:	0f 92       	push	r0
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIdx=0,Local_u8RowIdx=0,Local_u8PinState=0;
    193e:	1a 82       	std	Y+2, r1	; 0x02
    1940:	19 82       	std	Y+1, r1	; 0x01
    1942:	1c 82       	std	Y+4, r1	; 0x04
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColIdx=0;Local_u8ColIdx<COLUMN_NUM;Local_u8ColIdx++){
    1944:	1a 82       	std	Y+2, r1	; 0x02
    1946:	5e c0       	rjmp	.+188    	; 0x1a04 <KPD_u8GetPressedKey+0xd8>
		//activate current column
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColIdx],DIO_u8PIN_LOW);
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	fc 01       	movw	r30, r24
    1950:	eb 58       	subi	r30, 0x8B	; 139
    1952:	fe 4f       	sbci	r31, 0xFE	; 254
    1954:	90 81       	ld	r25, Z
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	69 2f       	mov	r22, r25
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_u8SetPinValue>
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++){
    1960:	19 82       	std	Y+1, r1	; 0x01
    1962:	3d c0       	rjmp	.+122    	; 0x19de <KPD_u8GetPressedKey+0xb2>
			//read current row
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	fc 01       	movw	r30, r24
    196c:	ef 58       	subi	r30, 0x8F	; 143
    196e:	fe 4f       	sbci	r31, 0xFE	; 254
    1970:	90 81       	ld	r25, Z
    1972:	9e 01       	movw	r18, r28
    1974:	2c 5f       	subi	r18, 0xFC	; 252
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	69 2f       	mov	r22, r25
    197c:	a9 01       	movw	r20, r18
    197e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8GetPinValue>

			//check if pressed
			if(Local_u8PinState==DIO_u8PIN_LOW){
    1982:	8c 81       	ldd	r24, Y+4	; 0x04
    1984:	88 23       	and	r24, r24
    1986:	41 f5       	brne	.+80     	; 0x19d8 <KPD_u8GetPressedKey+0xac>
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColIdx];
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	48 2f       	mov	r20, r24
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	ca 01       	movw	r24, r20
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	82 0f       	add	r24, r18
    19a0:	93 1f       	adc	r25, r19
    19a2:	fc 01       	movw	r30, r24
    19a4:	e7 58       	subi	r30, 0x87	; 135
    19a6:	fe 4f       	sbci	r31, 0xFE	; 254
    19a8:	80 81       	ld	r24, Z
    19aa:	8b 83       	std	Y+3, r24	; 0x03
    19ac:	0f c0       	rjmp	.+30     	; 0x19cc <KPD_u8GetPressedKey+0xa0>
				while(Local_u8PinState==DIO_u8PIN_LOW){
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	fc 01       	movw	r30, r24
    19b6:	ef 58       	subi	r30, 0x8F	; 143
    19b8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ba:	90 81       	ld	r25, Z
    19bc:	9e 01       	movw	r18, r28
    19be:	2c 5f       	subi	r18, 0xFC	; 252
    19c0:	3f 4f       	sbci	r19, 0xFF	; 255
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	69 2f       	mov	r22, r25
    19c6:	a9 01       	movw	r20, r18
    19c8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);

			//check if pressed
			if(Local_u8PinState==DIO_u8PIN_LOW){
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColIdx];
				while(Local_u8PinState==DIO_u8PIN_LOW){
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
    19ce:	88 23       	and	r24, r24
    19d0:	71 f3       	breq	.-36     	; 0x19ae <KPD_u8GetPressedKey+0x82>
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	8d 83       	std	Y+5, r24	; 0x05
    19d6:	1c c0       	rjmp	.+56     	; 0x1a10 <KPD_u8GetPressedKey+0xe4>
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColIdx=0;Local_u8ColIdx<COLUMN_NUM;Local_u8ColIdx++){
		//activate current column
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColIdx],DIO_u8PIN_LOW);
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++){
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	84 30       	cpi	r24, 0x04	; 4
    19e2:	08 f4       	brcc	.+2      	; 0x19e6 <KPD_u8GetPressedKey+0xba>
    19e4:	bf cf       	rjmp	.-130    	; 0x1964 <KPD_u8GetPressedKey+0x38>
				}
				return Local_u8PressedKey;
			}
		}
		//deactivate column
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	fc 01       	movw	r30, r24
    19ee:	eb 58       	subi	r30, 0x8B	; 139
    19f0:	fe 4f       	sbci	r31, 0xFE	; 254
    19f2:	90 81       	ld	r25, Z
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	69 2f       	mov	r22, r25
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	0e 94 47 0a 	call	0x148e	; 0x148e <DIO_u8SetPinValue>
	u8 Local_u8ColIdx=0,Local_u8RowIdx=0,Local_u8PinState=0;
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColIdx=0;Local_u8ColIdx<COLUMN_NUM;Local_u8ColIdx++){
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	8f 5f       	subi	r24, 0xFF	; 255
    1a02:	8a 83       	std	Y+2, r24	; 0x02
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	84 30       	cpi	r24, 0x04	; 4
    1a08:	08 f4       	brcc	.+2      	; 0x1a0c <KPD_u8GetPressedKey+0xe0>
    1a0a:	9e cf       	rjmp	.-196    	; 0x1948 <KPD_u8GetPressedKey+0x1c>
		//deactivate column
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
	}


	return Local_u8PressedKey;
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void){
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1a2a:	ea e3       	ldi	r30, 0x3A	; 58
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8f e0       	ldi	r24, 0x0F	; 15
    1a30:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    1a32:	e7 e3       	ldi	r30, 0x37	; 55
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	87 e0       	ldi	r24, 0x07	; 7
    1a38:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    1a3a:	e4 e3       	ldi	r30, 0x34	; 52
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
    1a40:	e1 e3       	ldi	r30, 0x31	; 49
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	80 83       	st	Z, r24

	PORTA=PORTA_INIT;
    1a48:	eb e3       	ldi	r30, 0x3B	; 59
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	80 83       	st	Z, r24
	PORTB=PORTB_INIT;
    1a50:	e8 e3       	ldi	r30, 0x38	; 56
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	10 82       	st	Z, r1
	PORTC=PORTC_INIT;
    1a56:	e5 e3       	ldi	r30, 0x35	; 53
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	10 82       	st	Z, r1
	PORTD=PORTD_INIT;
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	10 82       	st	Z, r1
}
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <main>:
#include "PORT_interface.h"
#include "CLCD_interface.h"
#include "KEYPAD_interface.h"


void main(){
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	65 97       	sbiw	r28, 0x15	; 21
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    1a84:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <PORT_voidInit>
	CLCD_voidInit();
    1a88:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_voidInit>
	s8 Local_u8PressedVal=0,Local_u8Col=0,Local_u8CharCounter=0,Local_u8NumCounter1=1,Local_u8NumCounter2=1;
    1a8c:	1d 86       	std	Y+13, r1	; 0x0d
    1a8e:	1c 86       	std	Y+12, r1	; 0x0c
    1a90:	1b 86       	std	Y+11, r1	; 0x0b
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	8a 87       	std	Y+10, r24	; 0x0a
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	89 87       	std	Y+9, r24	; 0x09
	s8 Local_u8Result=0,Local_u8Num1=0,Local_u8Num2=0;
    1a9a:	18 86       	std	Y+8, r1	; 0x08
    1a9c:	1f 82       	std	Y+7, r1	; 0x07
    1a9e:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8NumFlag=0;
    1aa0:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Characters[4]={'+','-','/','*'};
    1aa2:	8b e2       	ldi	r24, 0x2B	; 43
    1aa4:	8e 87       	std	Y+14, r24	; 0x0e
    1aa6:	8d e2       	ldi	r24, 0x2D	; 45
    1aa8:	8f 87       	std	Y+15, r24	; 0x0f
    1aaa:	8f e2       	ldi	r24, 0x2F	; 47
    1aac:	88 8b       	std	Y+16, r24	; 0x10
    1aae:	8a e2       	ldi	r24, 0x2A	; 42
    1ab0:	89 8b       	std	Y+17, r24	; 0x11
	while(1){
		do{
			Local_u8PressedVal=KPD_u8GetPressedKey();
    1ab2:	0e 94 96 0c 	call	0x192c	; 0x192c <KPD_u8GetPressedKey>
    1ab6:	8d 87       	std	Y+13, r24	; 0x0d
		}while(Local_u8PressedVal==0xff);
		switch(Local_u8PressedVal){
    1ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aba:	28 2f       	mov	r18, r24
    1abc:	33 27       	eor	r19, r19
    1abe:	27 fd       	sbrc	r18, 7
    1ac0:	30 95       	com	r19
    1ac2:	3d 8b       	std	Y+21, r19	; 0x15
    1ac4:	2c 8b       	std	Y+20, r18	; 0x14
    1ac6:	4c 89       	ldd	r20, Y+20	; 0x14
    1ac8:	5d 89       	ldd	r21, Y+21	; 0x15
    1aca:	4b 32       	cpi	r20, 0x2B	; 43
    1acc:	51 05       	cpc	r21, r1
    1ace:	b9 f1       	breq	.+110    	; 0x1b3e <main+0xd6>
    1ad0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ad2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ad4:	8c 32       	cpi	r24, 0x2C	; 44
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	84 f4       	brge	.+32     	; 0x1afa <main+0x92>
    1ada:	2c 89       	ldd	r18, Y+20	; 0x14
    1adc:	3d 89       	ldd	r19, Y+21	; 0x15
    1ade:	33 23       	and	r19, r19
    1ae0:	44 f3       	brlt	.-48     	; 0x1ab2 <main+0x4a>
    1ae2:	4c 89       	ldd	r20, Y+20	; 0x14
    1ae4:	5d 89       	ldd	r21, Y+21	; 0x15
    1ae6:	4a 30       	cpi	r20, 0x0A	; 10
    1ae8:	51 05       	cpc	r21, r1
    1aea:	0c f4       	brge	.+2      	; 0x1aee <main+0x86>
    1aec:	00 c1       	rjmp	.+512    	; 0x1cee <main+0x286>
    1aee:	8c 89       	ldd	r24, Y+20	; 0x14
    1af0:	9d 89       	ldd	r25, Y+21	; 0x15
    1af2:	8a 32       	cpi	r24, 0x2A	; 42
    1af4:	91 05       	cpc	r25, r1
    1af6:	d1 f1       	breq	.+116    	; 0x1b6c <main+0x104>
    1af8:	dc cf       	rjmp	.-72     	; 0x1ab2 <main+0x4a>
    1afa:	2c 89       	ldd	r18, Y+20	; 0x14
    1afc:	3d 89       	ldd	r19, Y+21	; 0x15
    1afe:	2f 32       	cpi	r18, 0x2F	; 47
    1b00:	31 05       	cpc	r19, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <main+0x9e>
    1b04:	3f c0       	rjmp	.+126    	; 0x1b84 <main+0x11c>
    1b06:	4c 89       	ldd	r20, Y+20	; 0x14
    1b08:	5d 89       	ldd	r21, Y+21	; 0x15
    1b0a:	40 33       	cpi	r20, 0x30	; 48
    1b0c:	51 05       	cpc	r21, r1
    1b0e:	34 f4       	brge	.+12     	; 0x1b1c <main+0xb4>
    1b10:	8c 89       	ldd	r24, Y+20	; 0x14
    1b12:	9d 89       	ldd	r25, Y+21	; 0x15
    1b14:	8d 32       	cpi	r24, 0x2D	; 45
    1b16:	91 05       	cpc	r25, r1
    1b18:	e9 f0       	breq	.+58     	; 0x1b54 <main+0xec>
    1b1a:	cb cf       	rjmp	.-106    	; 0x1ab2 <main+0x4a>
    1b1c:	2c 89       	ldd	r18, Y+20	; 0x14
    1b1e:	3d 89       	ldd	r19, Y+21	; 0x15
    1b20:	2d 33       	cpi	r18, 0x3D	; 61
    1b22:	31 05       	cpc	r19, r1
    1b24:	d9 f1       	breq	.+118    	; 0x1b9c <main+0x134>
    1b26:	4c 89       	ldd	r20, Y+20	; 0x14
    1b28:	5d 89       	ldd	r21, Y+21	; 0x15
    1b2a:	43 36       	cpi	r20, 0x63	; 99
    1b2c:	51 05       	cpc	r21, r1
    1b2e:	09 f0       	breq	.+2      	; 0x1b32 <main+0xca>
    1b30:	c0 cf       	rjmp	.-128    	; 0x1ab2 <main+0x4a>
		case KPD_CLR:
			CLCD_voidInit();
    1b32:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_voidInit>
			Local_u8NumFlag=0;
    1b36:	1d 82       	std	Y+5, r1	; 0x05
			Local_u8Num1=0;
    1b38:	1f 82       	std	Y+7, r1	; 0x07
			Local_u8Num2=0;
    1b3a:	1e 82       	std	Y+6, r1	; 0x06
    1b3c:	ba cf       	rjmp	.-140    	; 0x1ab2 <main+0x4a>
			//				CLCD_voidGoToXY(0,Local_u8Col);
			//				CLCD_voidSendData(Local_u8Characters[Local_u8CharCounter]);
			//			}
			break;
		case KPD_PLUS:
			if(Local_u8NumFlag==0){
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	88 23       	and	r24, r24
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <main+0xde>
    1b44:	b6 cf       	rjmp	.-148    	; 0x1ab2 <main+0x4a>
			CLCD_voidSendData('+');
    1b46:	8b e2       	ldi	r24, 0x2B	; 43
    1b48:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>
			Local_u8NumFlag=1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
			Local_u8CharCounter=0;}
    1b50:	1b 86       	std	Y+11, r1	; 0x0b
    1b52:	af cf       	rjmp	.-162    	; 0x1ab2 <main+0x4a>
			//				CLCD_voidGoToXY(0,Local_u8Col);
			//				CLCD_voidSendData(Local_u8Characters[Local_u8CharCounter]);
			//			}
			break;
		case KPD_MINUS:
			if(Local_u8NumFlag==0){
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	88 23       	and	r24, r24
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <main+0xf4>
    1b5a:	ab cf       	rjmp	.-170    	; 0x1ab2 <main+0x4a>
			CLCD_voidSendData('-');
    1b5c:	8d e2       	ldi	r24, 0x2D	; 45
    1b5e:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>
			Local_u8NumFlag=1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	8d 83       	std	Y+5, r24	; 0x05
			Local_u8CharCounter=1;}
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	8b 87       	std	Y+11, r24	; 0x0b
    1b6a:	a3 cf       	rjmp	.-186    	; 0x1ab2 <main+0x4a>
			//					CLCD_voidGoToXY(0,Local_u8Col);
			//					break;
			//			}
			break;
		case KPD_MUL:
			if(Local_u8NumFlag==0){
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	88 23       	and	r24, r24
    1b70:	09 f0       	breq	.+2      	; 0x1b74 <main+0x10c>
    1b72:	9f cf       	rjmp	.-194    	; 0x1ab2 <main+0x4a>
			CLCD_voidSendData('*');
    1b74:	8a e2       	ldi	r24, 0x2A	; 42
    1b76:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>
			Local_u8NumFlag=1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
			Local_u8CharCounter=3;}
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	8b 87       	std	Y+11, r24	; 0x0b
    1b82:	97 cf       	rjmp	.-210    	; 0x1ab2 <main+0x4a>
			//				CLCD_voidGoToXY(0,Local_u8Col);
			//				CLCD_voidSendData(Local_u8Characters[Local_u8CharCounter]);
			//			}
			break;
		case KPD_DIV:
			if(Local_u8NumFlag==0){
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	88 23       	and	r24, r24
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <main+0x124>
    1b8a:	93 cf       	rjmp	.-218    	; 0x1ab2 <main+0x4a>
			CLCD_voidSendData('/');
    1b8c:	8f e2       	ldi	r24, 0x2F	; 47
    1b8e:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>
			Local_u8NumFlag=1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	8d 83       	std	Y+5, r24	; 0x05
			Local_u8CharCounter=2;}
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	8b 87       	std	Y+11, r24	; 0x0b
    1b9a:	8b cf       	rjmp	.-234    	; 0x1ab2 <main+0x4a>
			//				CLCD_voidGoToXY(0,Local_u8Col);
			//				CLCD_voidSendData(Local_u8Characters[Local_u8CharCounter]);
			//			}
			break;
		case KPD_EQUAL:
			CLCD_voidSendData('=');
    1b9c:	8d e3       	ldi	r24, 0x3D	; 61
    1b9e:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>
			switch(Local_u8Characters[Local_u8CharCounter]){
    1ba2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	33 27       	eor	r19, r19
    1ba8:	27 fd       	sbrc	r18, 7
    1baa:	30 95       	com	r19
    1bac:	ce 01       	movw	r24, r28
    1bae:	0e 96       	adiw	r24, 0x0e	; 14
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	e2 0f       	add	r30, r18
    1bb4:	f3 1f       	adc	r31, r19
    1bb6:	80 81       	ld	r24, Z
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	3b 8b       	std	Y+19, r19	; 0x13
    1bbe:	2a 8b       	std	Y+18, r18	; 0x12
    1bc0:	4a 89       	ldd	r20, Y+18	; 0x12
    1bc2:	5b 89       	ldd	r21, Y+19	; 0x13
    1bc4:	4b 32       	cpi	r20, 0x2B	; 43
    1bc6:	51 05       	cpc	r21, r1
    1bc8:	b9 f0       	breq	.+46     	; 0x1bf8 <main+0x190>
    1bca:	8a 89       	ldd	r24, Y+18	; 0x12
    1bcc:	9b 89       	ldd	r25, Y+19	; 0x13
    1bce:	8c 32       	cpi	r24, 0x2C	; 44
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	3c f4       	brge	.+14     	; 0x1be2 <main+0x17a>
    1bd4:	2a 89       	ldd	r18, Y+18	; 0x12
    1bd6:	3b 89       	ldd	r19, Y+19	; 0x13
    1bd8:	2a 32       	cpi	r18, 0x2A	; 42
    1bda:	31 05       	cpc	r19, r1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <main+0x178>
    1bde:	6d c0       	rjmp	.+218    	; 0x1cba <main+0x252>
    1be0:	68 cf       	rjmp	.-304    	; 0x1ab2 <main+0x4a>
    1be2:	4a 89       	ldd	r20, Y+18	; 0x12
    1be4:	5b 89       	ldd	r21, Y+19	; 0x13
    1be6:	4d 32       	cpi	r20, 0x2D	; 45
    1be8:	51 05       	cpc	r21, r1
    1bea:	d1 f0       	breq	.+52     	; 0x1c20 <main+0x1b8>
    1bec:	8a 89       	ldd	r24, Y+18	; 0x12
    1bee:	9b 89       	ldd	r25, Y+19	; 0x13
    1bf0:	8f 32       	cpi	r24, 0x2F	; 47
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	79 f1       	breq	.+94     	; 0x1c54 <main+0x1ec>
    1bf6:	5d cf       	rjmp	.-326    	; 0x1ab2 <main+0x4a>
			case '+':
				CLCD_voidWriteNumber(Local_u8Num1+Local_u8Num2);
    1bf8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	33 27       	eor	r19, r19
    1bfe:	27 fd       	sbrc	r18, 7
    1c00:	30 95       	com	r19
    1c02:	8e 81       	ldd	r24, Y+6	; 0x06
    1c04:	99 27       	eor	r25, r25
    1c06:	87 fd       	sbrc	r24, 7
    1c08:	90 95       	com	r25
    1c0a:	82 0f       	add	r24, r18
    1c0c:	93 1f       	adc	r25, r19
    1c0e:	aa 27       	eor	r26, r26
    1c10:	97 fd       	sbrc	r25, 7
    1c12:	a0 95       	com	r26
    1c14:	ba 2f       	mov	r27, r26
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	0e 94 47 09 	call	0x128e	; 0x128e <CLCD_voidWriteNumber>
    1c1e:	49 cf       	rjmp	.-366    	; 0x1ab2 <main+0x4a>
				break;
			case '-':
				Local_u8Result=Local_u8Num1-Local_u8Num2;
    1c20:	9f 81       	ldd	r25, Y+7	; 0x07
    1c22:	8e 81       	ldd	r24, Y+6	; 0x06
    1c24:	29 2f       	mov	r18, r25
    1c26:	28 1b       	sub	r18, r24
    1c28:	82 2f       	mov	r24, r18
    1c2a:	88 87       	std	Y+8, r24	; 0x08
				if (Local_u8Result<0){
    1c2c:	88 85       	ldd	r24, Y+8	; 0x08
    1c2e:	88 23       	and	r24, r24
    1c30:	34 f4       	brge	.+12     	; 0x1c3e <main+0x1d6>
					CLCD_voidSendData('-');
    1c32:	8d e2       	ldi	r24, 0x2D	; 45
    1c34:	0e 94 92 07 	call	0xf24	; 0xf24 <CLCD_voidSendData>
					Local_u8Result=-Local_u8Result;
    1c38:	88 85       	ldd	r24, Y+8	; 0x08
    1c3a:	81 95       	neg	r24
    1c3c:	88 87       	std	Y+8, r24	; 0x08
				}
				CLCD_voidWriteNumber(Local_u8Result);
    1c3e:	88 85       	ldd	r24, Y+8	; 0x08
    1c40:	99 27       	eor	r25, r25
    1c42:	87 fd       	sbrc	r24, 7
    1c44:	90 95       	com	r25
    1c46:	a9 2f       	mov	r26, r25
    1c48:	b9 2f       	mov	r27, r25
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 47 09 	call	0x128e	; 0x128e <CLCD_voidWriteNumber>
    1c52:	2f cf       	rjmp	.-418    	; 0x1ab2 <main+0x4a>
				break;
			case '/':
				if(Local_u8Num2==0){
    1c54:	8e 81       	ldd	r24, Y+6	; 0x06
    1c56:	88 23       	and	r24, r24
    1c58:	29 f4       	brne	.+10     	; 0x1c64 <main+0x1fc>
					CLCD_voidSendString("Invalid!");
    1c5a:	80 e6       	ldi	r24, 0x60	; 96
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 be 08 	call	0x117c	; 0x117c <CLCD_voidSendString>
    1c62:	27 cf       	rjmp	.-434    	; 0x1ab2 <main+0x4a>
					break;
				}
				f32 Local_f32Res=(float)Local_u8Num1/Local_u8Num2;
    1c64:	8f 81       	ldd	r24, Y+7	; 0x07
    1c66:	99 27       	eor	r25, r25
    1c68:	87 fd       	sbrc	r24, 7
    1c6a:	90 95       	com	r25
    1c6c:	a9 2f       	mov	r26, r25
    1c6e:	b9 2f       	mov	r27, r25
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    1c78:	7b 01       	movw	r14, r22
    1c7a:	8c 01       	movw	r16, r24
    1c7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7e:	99 27       	eor	r25, r25
    1c80:	87 fd       	sbrc	r24, 7
    1c82:	90 95       	com	r25
    1c84:	a9 2f       	mov	r26, r25
    1c86:	b9 2f       	mov	r27, r25
    1c88:	bc 01       	movw	r22, r24
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    1c90:	9b 01       	movw	r18, r22
    1c92:	ac 01       	movw	r20, r24
    1c94:	c8 01       	movw	r24, r16
    1c96:	b7 01       	movw	r22, r14
    1c98:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	9a 83       	std	Y+2, r25	; 0x02
    1ca4:	ab 83       	std	Y+3, r26	; 0x03
    1ca6:	bc 83       	std	Y+4, r27	; 0x04
				CLCD_voidWriteFloatNum(Local_f32Res);
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	ab 81       	ldd	r26, Y+3	; 0x03
    1cae:	bc 81       	ldd	r27, Y+4	; 0x04
    1cb0:	bc 01       	movw	r22, r24
    1cb2:	cd 01       	movw	r24, r26
    1cb4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <CLCD_voidWriteFloatNum>
    1cb8:	fc ce       	rjmp	.-520    	; 0x1ab2 <main+0x4a>
				break;
			case '*':
				CLCD_voidWriteNumber(Local_u8Num1*Local_u8Num2);
    1cba:	8f 81       	ldd	r24, Y+7	; 0x07
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	33 27       	eor	r19, r19
    1cc0:	27 fd       	sbrc	r18, 7
    1cc2:	30 95       	com	r19
    1cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc6:	99 27       	eor	r25, r25
    1cc8:	87 fd       	sbrc	r24, 7
    1cca:	90 95       	com	r25
    1ccc:	ac 01       	movw	r20, r24
    1cce:	24 9f       	mul	r18, r20
    1cd0:	c0 01       	movw	r24, r0
    1cd2:	25 9f       	mul	r18, r21
    1cd4:	90 0d       	add	r25, r0
    1cd6:	34 9f       	mul	r19, r20
    1cd8:	90 0d       	add	r25, r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	aa 27       	eor	r26, r26
    1cde:	97 fd       	sbrc	r25, 7
    1ce0:	a0 95       	com	r26
    1ce2:	ba 2f       	mov	r27, r26
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	cd 01       	movw	r24, r26
    1ce8:	0e 94 47 09 	call	0x128e	; 0x128e <CLCD_voidWriteNumber>
    1cec:	e2 ce       	rjmp	.-572    	; 0x1ab2 <main+0x4a>
			//				CLCD_voidGoToXY(0,Local_u8Col);
			//				CLCD_voidSendData(Local_u8Characters[Local_u8CharCounter]);
			//			}
			break;
			case 0 ... 9:
			CLCD_voidWriteNumber(Local_u8PressedVal);
    1cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf0:	99 27       	eor	r25, r25
    1cf2:	87 fd       	sbrc	r24, 7
    1cf4:	90 95       	com	r25
    1cf6:	a9 2f       	mov	r26, r25
    1cf8:	b9 2f       	mov	r27, r25
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 47 09 	call	0x128e	; 0x128e <CLCD_voidWriteNumber>
			if(Local_u8NumFlag==0){
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	88 23       	and	r24, r24
    1d06:	99 f4       	brne	.+38     	; 0x1d2e <main+0x2c6>
				Local_u8Num1=(Local_u8Num1*10)+Local_u8PressedVal;
    1d08:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0a:	99 27       	eor	r25, r25
    1d0c:	87 fd       	sbrc	r24, 7
    1d0e:	90 95       	com	r25
    1d10:	9c 01       	movw	r18, r24
    1d12:	22 0f       	add	r18, r18
    1d14:	33 1f       	adc	r19, r19
    1d16:	c9 01       	movw	r24, r18
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	82 0f       	add	r24, r18
    1d22:	93 1f       	adc	r25, r19
    1d24:	98 2f       	mov	r25, r24
    1d26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d28:	89 0f       	add	r24, r25
    1d2a:	8f 83       	std	Y+7, r24	; 0x07
    1d2c:	c2 ce       	rjmp	.-636    	; 0x1ab2 <main+0x4a>
			}
			else if(Local_u8NumFlag==1){
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <main+0x2ce>
    1d34:	be ce       	rjmp	.-644    	; 0x1ab2 <main+0x4a>
				Local_u8Num2=(Local_u8Num2*10)+Local_u8PressedVal;
    1d36:	8e 81       	ldd	r24, Y+6	; 0x06
    1d38:	99 27       	eor	r25, r25
    1d3a:	87 fd       	sbrc	r24, 7
    1d3c:	90 95       	com	r25
    1d3e:	9c 01       	movw	r18, r24
    1d40:	22 0f       	add	r18, r18
    1d42:	33 1f       	adc	r19, r19
    1d44:	c9 01       	movw	r24, r18
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	82 0f       	add	r24, r18
    1d50:	93 1f       	adc	r25, r19
    1d52:	98 2f       	mov	r25, r24
    1d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d56:	89 0f       	add	r24, r25
    1d58:	8e 83       	std	Y+6, r24	; 0x06
    1d5a:	ab ce       	rjmp	.-682    	; 0x1ab2 <main+0x4a>

00001d5c <__mulsi3>:
    1d5c:	62 9f       	mul	r22, r18
    1d5e:	d0 01       	movw	r26, r0
    1d60:	73 9f       	mul	r23, r19
    1d62:	f0 01       	movw	r30, r0
    1d64:	82 9f       	mul	r24, r18
    1d66:	e0 0d       	add	r30, r0
    1d68:	f1 1d       	adc	r31, r1
    1d6a:	64 9f       	mul	r22, r20
    1d6c:	e0 0d       	add	r30, r0
    1d6e:	f1 1d       	adc	r31, r1
    1d70:	92 9f       	mul	r25, r18
    1d72:	f0 0d       	add	r31, r0
    1d74:	83 9f       	mul	r24, r19
    1d76:	f0 0d       	add	r31, r0
    1d78:	74 9f       	mul	r23, r20
    1d7a:	f0 0d       	add	r31, r0
    1d7c:	65 9f       	mul	r22, r21
    1d7e:	f0 0d       	add	r31, r0
    1d80:	99 27       	eor	r25, r25
    1d82:	72 9f       	mul	r23, r18
    1d84:	b0 0d       	add	r27, r0
    1d86:	e1 1d       	adc	r30, r1
    1d88:	f9 1f       	adc	r31, r25
    1d8a:	63 9f       	mul	r22, r19
    1d8c:	b0 0d       	add	r27, r0
    1d8e:	e1 1d       	adc	r30, r1
    1d90:	f9 1f       	adc	r31, r25
    1d92:	bd 01       	movw	r22, r26
    1d94:	cf 01       	movw	r24, r30
    1d96:	11 24       	eor	r1, r1
    1d98:	08 95       	ret

00001d9a <__udivmodsi4>:
    1d9a:	a1 e2       	ldi	r26, 0x21	; 33
    1d9c:	1a 2e       	mov	r1, r26
    1d9e:	aa 1b       	sub	r26, r26
    1da0:	bb 1b       	sub	r27, r27
    1da2:	fd 01       	movw	r30, r26
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <__udivmodsi4_ep>

00001da6 <__udivmodsi4_loop>:
    1da6:	aa 1f       	adc	r26, r26
    1da8:	bb 1f       	adc	r27, r27
    1daa:	ee 1f       	adc	r30, r30
    1dac:	ff 1f       	adc	r31, r31
    1dae:	a2 17       	cp	r26, r18
    1db0:	b3 07       	cpc	r27, r19
    1db2:	e4 07       	cpc	r30, r20
    1db4:	f5 07       	cpc	r31, r21
    1db6:	20 f0       	brcs	.+8      	; 0x1dc0 <__udivmodsi4_ep>
    1db8:	a2 1b       	sub	r26, r18
    1dba:	b3 0b       	sbc	r27, r19
    1dbc:	e4 0b       	sbc	r30, r20
    1dbe:	f5 0b       	sbc	r31, r21

00001dc0 <__udivmodsi4_ep>:
    1dc0:	66 1f       	adc	r22, r22
    1dc2:	77 1f       	adc	r23, r23
    1dc4:	88 1f       	adc	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	1a 94       	dec	r1
    1dca:	69 f7       	brne	.-38     	; 0x1da6 <__udivmodsi4_loop>
    1dcc:	60 95       	com	r22
    1dce:	70 95       	com	r23
    1dd0:	80 95       	com	r24
    1dd2:	90 95       	com	r25
    1dd4:	9b 01       	movw	r18, r22
    1dd6:	ac 01       	movw	r20, r24
    1dd8:	bd 01       	movw	r22, r26
    1dda:	cf 01       	movw	r24, r30
    1ddc:	08 95       	ret

00001dde <__prologue_saves__>:
    1dde:	2f 92       	push	r2
    1de0:	3f 92       	push	r3
    1de2:	4f 92       	push	r4
    1de4:	5f 92       	push	r5
    1de6:	6f 92       	push	r6
    1de8:	7f 92       	push	r7
    1dea:	8f 92       	push	r8
    1dec:	9f 92       	push	r9
    1dee:	af 92       	push	r10
    1df0:	bf 92       	push	r11
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	ca 1b       	sub	r28, r26
    1e08:	db 0b       	sbc	r29, r27
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	09 94       	ijmp

00001e16 <__epilogue_restores__>:
    1e16:	2a 88       	ldd	r2, Y+18	; 0x12
    1e18:	39 88       	ldd	r3, Y+17	; 0x11
    1e1a:	48 88       	ldd	r4, Y+16	; 0x10
    1e1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e20:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e22:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e24:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e26:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e28:	b9 84       	ldd	r11, Y+9	; 0x09
    1e2a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e2c:	df 80       	ldd	r13, Y+7	; 0x07
    1e2e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e30:	fd 80       	ldd	r15, Y+5	; 0x05
    1e32:	0c 81       	ldd	r16, Y+4	; 0x04
    1e34:	1b 81       	ldd	r17, Y+3	; 0x03
    1e36:	aa 81       	ldd	r26, Y+2	; 0x02
    1e38:	b9 81       	ldd	r27, Y+1	; 0x01
    1e3a:	ce 0f       	add	r28, r30
    1e3c:	d1 1d       	adc	r29, r1
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	ed 01       	movw	r28, r26
    1e4a:	08 95       	ret

00001e4c <_exit>:
    1e4c:	f8 94       	cli

00001e4e <__stop_program>:
    1e4e:	ff cf       	rjmp	.-2      	; 0x1e4e <__stop_program>
